apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: finsight
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: root-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: root-password
        - name: MONGO_INITDB_DATABASE
          value: finsight
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d/
      volumes:
      - name: mongodb-init
        configMap:
          name: mongodb-init
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: finsight
spec:
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-init
  namespace: finsight
data:
  mongo-init.js: |
    db = db.getSiblingDB('finsight');
    db.createCollection('conversations');
    db.createCollection('users');
    db.conversations.createIndex({ conversationId: 1 }, { unique: true });
    db.conversations.createIndex({ userId: 1 });
    db.users.createIndex({ email: 1 }, { unique: true });
    db.createUser({
      user: 'finsight_user',
      pwd: 'finsight_password',
      roles: [{ role: 'readWrite', db: 'finsight' }]
    });
    db.users.insertOne({
      _id: 'user_admin',
      username: 'admin',
      email: 'admin@example.com',
      password: '$2b$10$rRuVddzTVJkBp4X5rMVL8.4/QwHA.9wSUEf33VRbOeP0jWAVQlGFy',
      preferences: {
        useAll: true,
        chatGPT4: true,
        deepseek: false,
        claude: false,
        llama: false
      },
      createdAt: new Date()
    });
